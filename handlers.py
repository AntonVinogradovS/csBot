from aiogram import types, Dispatcher
from aiogram.types import CallbackQuery, MediaGroup, InputMediaDocument
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from texts import *
from keyboards import * 
from database import *
import re
from config import CHANNEL_USERNAME
import random
from datetime import datetime, timedelta
import pytz 


async def cmdStart(message: types.Message):
    
    user_id = message.from_user.id
    #print(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        user_status = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        
        if user_status.status != 'member' and user_status.status != 'creator':
            await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=helpFollowerKeyboard)
        else:
            await message.answer(text=welcomeMessage, reply_markup=firstKeyboard)
    except Exception as e:
        print(e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return
    #print(message.from_user.id)
    referral_token_str = message.get_args()
    
    if referral_token_str:
        referral_token = int(referral_token_str)
    else:
        referral_token = 0
    print(referral_token)
    checkInDB = await get_user_by_id(message.from_user.id)
    if checkInDB == None:
        await add_user(user_id, referral_token, 1, 0, 0, 1, 0)
    # if referral_token:
    #     referred_by_user_id = get_user_id_by_referral_token(referral_token)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    #     if referred_by_user_id:
    #         # –°–≤—è–∂–∏—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    #         link_referral_users(referred_by_user_id, message.from_user.id)
    

async def checkFollower(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        user_status = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        print(user_status.status)
        if user_status.status != 'member' and user_status.status != 'creator' :
            await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
            return
    except Exception as e:
        print(e)
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return
    await bot.delete_message(callback_query.message.chat.id,callback_query.message.message_id)

    with open("scken.jpg", "rb") as file:
        await bot.send_photo(chat_id=callback_query.from_user.id,photo=file, caption="‚úÖ –û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é trade —Å—Å—ã–ª–∫—É.  –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=steamKeyboard)
    
    await FSMAdd.a0.set()
    

class FSMAdd(StatesGroup):
    a0 = State()

async def inputUrl(message: types.Message):
    user_id = message.from_user.id
    try:
        user_status = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if user_status.status != 'member' and user_status.status != 'creator' :
            await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=helpFollowerKeyboard)
            return
    except Exception as e:
        print(e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return
    with open("scken.jpg", "rb") as file:
        await bot.send_photo(chat_id=message.from_user.id,photo=file, caption="‚úÖ –û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é trade —Å—Å—ã–ª–∫—É.  –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=steamKeyboard)
    await FSMAdd.a0.set()

async def inputUrlCheck(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    '''–í—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É'''
    admin_id = 5776030599
    #5776030599
    try:
        checkinfo = await get_user_by_id(user_id)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        await state.finish()
        return
    # if checkinfo == None:
    #     await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    #     await state.finish()
    #     return
    if checkinfo[2] != 0:    
        if re.match(r'https?://', text):
            random_number = random.randint(1, 30)
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz)
            future_time = current_time + timedelta(hours=3)
            formatted_future_time = future_time.strftime("%Y-%m-%d %H:%M:%S –ú–°–ö")
            admin_time = current_time.strftime("%Y-%m-%d %H:%M:%S –ú–°–ö")
            try:
                await bot.send_message(chat_id= admin_id, text= f'{admin_time}\n{text}')
            except:
                pass
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            mess = f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω—è–ª–∏ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏\n\n–í–∞—à–µ –º–µ—Å—Ç–æ: {random_number}\n‚åõÔ∏è –¢—Ä–µ–π–¥ –ø–æ—Å—Ç—É–ø–∏—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤: {formatted_future_time}. –æ–∂–∏–¥–∞–π—Ç–µ</b>"
            await message.answer(mess, parse_mode=types.ParseMode.HTML)
            count = checkinfo[2] - 1
            ref = checkinfo[1]
            if ref != 0:
                infoRef = await get_user_by_id(ref)

                await update_friends_invited(ref, infoRef[2]+1, infoRef[4]+1)
            await update_skins_received(user_id, count, checkinfo[3]+1)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
    else:
        await message.answer("–í–∞—à–∞ –∫–≤–æ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
    await state.finish()

async def personalAccount(message: types.Message):
    id = message.from_user.id
    try:
        chekInfo = await get_user_by_id(id)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
        return
    if chekInfo == None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return
    countInvitations = chekInfo[-3]
    countScins = chekInfo[-4]                                                           #https://t.me/skinsfree2024_bot?start= https://t.me/DemoVin_bot
    limitScins = chekInfo[-5]
    with open("account.jpg", "rb") as file:
        await bot.send_photo(chat_id=message.from_user.id, photo=file, caption=personalAccountAnswer(countInvitations, countScins, limitScins, id), parse_mode=types.ParseMode.HTML, reply_markup=url(f"https://t.me/skinsfree2024_bot?start={id}",countScins))
    #await message.answer(text=personalAccountAnswer(countInvitations, countScins, limitScins, id), parse_mode=types.ParseMode.HTML)

async def help(message: types.Message):
    with open("help.jpg", "rb") as file:
        await bot.send_photo(chat_id= message.from_user.id, photo=file, caption=helpText, reply_markup=readmeKeyboard)
    #await message.answer(text = helpText, reply_markup=readmeKeyboard)

async def bonus(message: types.Message):
    with open("bonus.jpg", "rb") as file:
        await bot.send_photo(chat_id= message.from_user.id, photo = file, caption="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞ –Ω–µ—Ç.")
    #await message.answer(text = helpText, reply_markup=readmeKeyboard)


async def support(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @owner_eatgamesleeps")

async def admin(message:types.Message):
    admin = [5776030599,1313463136]
    if message.from_user.id in admin:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞", reply_markup=adminKb)






def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmdStart, commands=['start'])
    dp.register_message_handler(inputUrl, text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω")
    dp.register_message_handler(inputUrlCheck, state=FSMAdd.a0, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(personalAccount, text="ü§µ‚Äç‚ôÇÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    dp.register_callback_query_handler(checkFollower, lambda c: c.data == "checkFollow")
    dp.register_message_handler(help, text = "üôã‚Äç‚ôÇÔ∏è–ü–æ–º–æ—â—å")
    dp.register_message_handler(bonus, text = "üî™–°–∫–∏–Ω –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞")
    dp.register_callback_query_handler(support, lambda c: c.data == "support")
    
    
